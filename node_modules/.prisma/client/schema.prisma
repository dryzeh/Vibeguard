datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  SECURITY
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BraceletStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  LOST
}

enum AlertType {
  DISTRESS
  BATTERY_LOW
  ZONE_CAPACITY
  SUSPICIOUS_ACTIVITY
  MEDICAL
  FIRE
  OTHER
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  IGNORED
}

enum EmergencyStatus {
  ACTIVE
  RESPONDING
  RESOLVED
  ESCALATED
}

enum SensorType {
  OCCUPANCY
  TEMPERATURE
  NOISE
  AIR_QUALITY
  MOTION
  OTHER
}

enum SensorStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  ERROR
}

model Nightclub {
  id               String             @id @default(cuid())
  name             String
  address          String
  floorPlans       FloorPlan[]
  users            User[]
  bracelets        Bracelet[]
  zones            Zone[]
  emergencies      Emergency[]
  settings         Json? // Venue-specific settings
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  analyticsReports AnalyticsReport[]
  predictions      Prediction[]
  anomalies        Anomaly[]
  behaviors        BehaviorAnalysis[]
  realTimeMetrics  RealTimeMetric[]
  dataStreams      DataStream[]
  cacheEntries     CacheEntry[]
}

model User {
  id               String      @id @default(cuid())
  email            String      @unique
  password         String
  name             String
  role             UserRole    @default(STAFF)
  status           UserStatus  @default(ACTIVE)
  deviceId         String? // Associated bracelet ID
  nightclubId      String?
  nightclub        Nightclub?  @relation(fields: [nightclubId], references: [id])
  alerts           Alert[]
  emergencies      Emergency[] // Emergencies handled by this user
  resetToken       String? // Password reset token
  resetTokenExpiry DateTime? // Password reset token expiry
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  lastLogin        DateTime?
  lastLocation     Json? // Last known location in the venue
}

model FloorPlan {
  id          String    @id @default(cuid())
  name        String
  imageUrl    String
  nightclubId String
  nightclub   Nightclub @relation(fields: [nightclubId], references: [id])
  zones       Zone[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  metadata    Json? // Additional floor plan data
}

model Zone {
  id              String             @id @default(cuid())
  name            String
  coordinates     Json // Polygon coordinates for the zone
  capacity        Int // Maximum capacity
  floorPlanId     String
  floorPlan       FloorPlan          @relation(fields: [floorPlanId], references: [id])
  nightclubId     String
  nightclub       Nightclub          @relation(fields: [nightclubId], references: [id])
  alerts          Alert[]
  emergencies     Emergency[]
  sensors         Sensor[] // IoT sensors in the zone
  anomalies       Anomaly[]
  behaviors       BehaviorAnalysis[]
  realTimeMetrics RealTimeMetric[]
  predictions     Prediction[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Bracelet {
  id           String         @id @default(cuid())
  deviceId     String         @unique // Physical device ID
  batteryLevel Int? // Current battery level
  status       BraceletStatus @default(ACTIVE)
  lastSeen     DateTime? // Last connection time
  nightclubId  String
  nightclub    Nightclub      @relation(fields: [nightclubId], references: [id])
  alerts       Alert[]
  emergencies  Emergency[]
  metadata     Json? // Device-specific metadata
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Alert {
  id         String      @id @default(cuid())
  type       AlertType
  status     AlertStatus @default(ACTIVE)
  braceletId String
  bracelet   Bracelet    @relation(fields: [braceletId], references: [id])
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  zoneId     String
  zone       Zone        @relation(fields: [zoneId], references: [id])
  metadata   Json? // Additional alert data
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  resolvedAt DateTime?
}

model Emergency {
  id                String          @id @default(cuid())
  status            EmergencyStatus @default(ACTIVE)
  braceletId        String
  bracelet          Bracelet        @relation(fields: [braceletId], references: [id])
  zoneId            String
  zone              Zone            @relation(fields: [zoneId], references: [id])
  nightclubId       String
  nightclub         Nightclub       @relation(fields: [nightclubId], references: [id])
  responderId       String? // Security personnel responding
  responder         User?           @relation(fields: [responderId], references: [id])
  responseTime      Int? // Time to respond in milliseconds
  escalationDetails Json? // Details if emergency was escalated
  resolutionDetails Json? // Details of how emergency was resolved
  metadata          Json? // Additional emergency data
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  resolvedAt        DateTime?
}

model Sensor {
  id          String       @id @default(cuid())
  type        SensorType
  status      SensorStatus @default(ACTIVE)
  zoneId      String
  zone        Zone         @relation(fields: [zoneId], references: [id])
  data        Json? // Latest sensor data
  metadata    Json? // Sensor configuration
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastReading DateTime?
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String // Type of entity being audited
  entityId   String // ID of entity being audited
  userId     String? // User who performed the action
  metadata   Json? // Additional audit data
  createdAt  DateTime @default(now())
}

model AnalyticsReport {
  id          String   @id @default(cuid())
  nightclubId String
  type        String // AI_ANALYSIS, EMERGENCY_STATS, PERSONNEL_STATS, ZONE_STATS
  report      Json // The actual analytics data
  metadata    Json? // Additional metadata like timeRange, generatedAt, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  nightclub Nightclub @relation(fields: [nightclubId], references: [id])

  @@index([nightclubId])
  @@index([type])
  @@index([createdAt])
}

// AI and Analytics Models
model AIModel {
  id        String   @id @default(cuid())
  type      String // PREDICTION, ANOMALY_DETECTION, BEHAVIOR_ANALYSIS
  name      String
  version   String
  status    String // ACTIVE, INACTIVE, TRAINING
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  predictions      Prediction[]
  anomalies        Anomaly[]
  behaviorAnalyses BehaviorAnalysis[]

  @@index([type, status])
}

model Prediction {
  id          String   @id @default(cuid())
  type        String // EMERGENCY, OCCUPANCY, STAFFING
  timestamp   DateTime @default(now())
  value       Float
  confidence  Float
  metadata    Json?
  nightclubId String
  zoneId      String?
  modelId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nightclub Nightclub @relation(fields: [nightclubId], references: [id])
  zone      Zone?     @relation(fields: [zoneId], references: [id])
  model     AIModel   @relation(fields: [modelId], references: [id])

  @@index([type, timestamp])
  @@index([nightclubId, timestamp])
}

model Anomaly {
  id          String   @id @default(cuid())
  type        String // BEHAVIOR, MOVEMENT, OCCUPANCY
  severity    String // LOW, MEDIUM, HIGH, CRITICAL
  status      String // DETECTED, INVESTIGATING, RESOLVED
  description String
  timestamp   DateTime @default(now())
  metadata    Json?
  nightclubId String
  zoneId      String?
  modelId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nightclub Nightclub @relation(fields: [nightclubId], references: [id])
  zone      Zone?     @relation(fields: [zoneId], references: [id])
  model     AIModel   @relation(fields: [modelId], references: [id])

  @@index([type, severity, status])
  @@index([nightclubId, timestamp])
  @@index([zoneId, timestamp])
}

model BehaviorAnalysis {
  id          String   @id @default(cuid())
  type        String // CROWD_BEHAVIOR, MOVEMENT_PATTERNS, INTERACTION_ANALYSIS
  timestamp   DateTime @default(now())
  insights    Json
  metadata    Json?
  nightclubId String
  zoneId      String?
  modelId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nightclub Nightclub @relation(fields: [nightclubId], references: [id])
  zone      Zone?     @relation(fields: [zoneId], references: [id])
  model     AIModel   @relation(fields: [modelId], references: [id])

  @@index([type, timestamp])
  @@index([nightclubId, timestamp])
  @@index([zoneId, timestamp])
}

// Real-time Processing Models
model RealTimeMetric {
  id          String   @id @default(cuid())
  type        String // OCCUPANCY, ALERT_COUNT, RESPONSE_TIME
  value       Float
  timestamp   DateTime @default(now())
  metadata    Json?
  nightclubId String
  zoneId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nightclub Nightclub @relation(fields: [nightclubId], references: [id])
  zone      Zone?     @relation(fields: [zoneId], references: [id])

  @@index([type, timestamp])
  @@index([nightclubId, timestamp])
  @@index([zoneId, timestamp])
}

model DataStream {
  id          String   @id @default(cuid())
  type        String // SENSOR_DATA, BRACELET_DATA, EMERGENCY_DATA
  status      String // ACTIVE, PAUSED, ERROR
  lastUpdate  DateTime @default(now())
  metadata    Json?
  nightclubId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nightclub Nightclub @relation(fields: [nightclubId], references: [id])

  @@index([type, status])
  @@index([nightclubId, lastUpdate])
}

// Caching Model
model CacheEntry {
  id          String    @id @default(cuid())
  key         String    @unique
  value       Json
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  nightclubId String
  nightclub   Nightclub @relation(fields: [nightclubId], references: [id])

  @@index([nightclubId])
  @@index([expiresAt])
}
