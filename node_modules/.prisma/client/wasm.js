
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.NightclubScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  status: 'status',
  deviceId: 'deviceId',
  nightclubId: 'nightclubId',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  lastLocation: 'lastLocation'
};

exports.Prisma.FloorPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  imageUrl: 'imageUrl',
  nightclubId: 'nightclubId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metadata: 'metadata'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  coordinates: 'coordinates',
  capacity: 'capacity',
  floorPlanId: 'floorPlanId',
  nightclubId: 'nightclubId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BraceletScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  batteryLevel: 'batteryLevel',
  status: 'status',
  lastSeen: 'lastSeen',
  nightclubId: 'nightclubId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  braceletId: 'braceletId',
  userId: 'userId',
  zoneId: 'zoneId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.EmergencyScalarFieldEnum = {
  id: 'id',
  status: 'status',
  braceletId: 'braceletId',
  zoneId: 'zoneId',
  nightclubId: 'nightclubId',
  responderId: 'responderId',
  responseTime: 'responseTime',
  escalationDetails: 'escalationDetails',
  resolutionDetails: 'resolutionDetails',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.SensorScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  zoneId: 'zoneId',
  data: 'data',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastReading: 'lastReading'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsReportScalarFieldEnum = {
  id: 'id',
  nightclubId: 'nightclubId',
  type: 'type',
  report: 'report',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIModelScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  version: 'version',
  status: 'status',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PredictionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  timestamp: 'timestamp',
  value: 'value',
  confidence: 'confidence',
  metadata: 'metadata',
  nightclubId: 'nightclubId',
  zoneId: 'zoneId',
  modelId: 'modelId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnomalyScalarFieldEnum = {
  id: 'id',
  type: 'type',
  severity: 'severity',
  status: 'status',
  description: 'description',
  timestamp: 'timestamp',
  metadata: 'metadata',
  nightclubId: 'nightclubId',
  zoneId: 'zoneId',
  modelId: 'modelId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BehaviorAnalysisScalarFieldEnum = {
  id: 'id',
  type: 'type',
  timestamp: 'timestamp',
  insights: 'insights',
  metadata: 'metadata',
  nightclubId: 'nightclubId',
  zoneId: 'zoneId',
  modelId: 'modelId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RealTimeMetricScalarFieldEnum = {
  id: 'id',
  type: 'type',
  value: 'value',
  timestamp: 'timestamp',
  metadata: 'metadata',
  nightclubId: 'nightclubId',
  zoneId: 'zoneId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataStreamScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  lastUpdate: 'lastUpdate',
  metadata: 'metadata',
  nightclubId: 'nightclubId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CacheEntryScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  nightclubId: 'nightclubId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  SECURITY: 'SECURITY',
  STAFF: 'STAFF'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.BraceletStatus = exports.$Enums.BraceletStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  LOST: 'LOST'
};

exports.AlertType = exports.$Enums.AlertType = {
  DISTRESS: 'DISTRESS',
  BATTERY_LOW: 'BATTERY_LOW',
  ZONE_CAPACITY: 'ZONE_CAPACITY',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  MEDICAL: 'MEDICAL',
  FIRE: 'FIRE',
  OTHER: 'OTHER'
};

exports.AlertStatus = exports.$Enums.AlertStatus = {
  ACTIVE: 'ACTIVE',
  ACKNOWLEDGED: 'ACKNOWLEDGED',
  RESOLVED: 'RESOLVED',
  IGNORED: 'IGNORED'
};

exports.EmergencyStatus = exports.$Enums.EmergencyStatus = {
  ACTIVE: 'ACTIVE',
  RESPONDING: 'RESPONDING',
  RESOLVED: 'RESOLVED',
  ESCALATED: 'ESCALATED'
};

exports.SensorType = exports.$Enums.SensorType = {
  OCCUPANCY: 'OCCUPANCY',
  TEMPERATURE: 'TEMPERATURE',
  NOISE: 'NOISE',
  AIR_QUALITY: 'AIR_QUALITY',
  MOTION: 'MOTION',
  OTHER: 'OTHER'
};

exports.SensorStatus = exports.$Enums.SensorStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  ERROR: 'ERROR'
};

exports.Prisma.ModelName = {
  Nightclub: 'Nightclub',
  User: 'User',
  FloorPlan: 'FloorPlan',
  Zone: 'Zone',
  Bracelet: 'Bracelet',
  Alert: 'Alert',
  Emergency: 'Emergency',
  Sensor: 'Sensor',
  AuditLog: 'AuditLog',
  AnalyticsReport: 'AnalyticsReport',
  AIModel: 'AIModel',
  Prediction: 'Prediction',
  Anomaly: 'Anomaly',
  BehaviorAnalysis: 'BehaviorAnalysis',
  RealTimeMetric: 'RealTimeMetric',
  DataStream: 'DataStream',
  CacheEntry: 'CacheEntry'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
